"use strict";

// Что такое ооп
// ооп не решает всех проблем, работает так же хорошо
// как и функциональное программирование/процедурный стиль
// ооп не решает проблемы плохого кода
// программист лось нафигачит говнокоду вагон)
// ооп это всего лишь инструмент
// 1. программы становятся сложнее
// 2. решение сложности-разбивка на модули
// 3. ооп использует модульность(ну типа разбивка, следствие)
// 4. одна из проблем ооп сложность разбивки кода на модули если чет не понятно
// 5. рефакторинг когда хотим лучшеЕ чем было, переписать
// 6. разбить на модули сложно. понимаем какие взаимосвязи, куски, развитие
// 7. определение сущности(модуля) это очень важно
// 8. нужно выполнить абстрагирование. мы работаем не с чем то конкретным
// 9. ООП - абстракция (откидываем всё не нужно) - построение модели - параметры, которые станут свойствами
// какие действия можно выполнять с этими абстрациями - закладываем основу методов
// 10. Пример абстракции - (пример модели) -> user (username, email, password)
// user методы (login(), logout() это сущности)
// 11. Если не правильно построить абстрации, то придется рефакторить
// 12. Рефакторинг это улучшение кода без написания новых функций
// 13. Один из китов ООП -> наследование 
// Берем модель(объект) user 
// Есть у user свойства и методы
// user.getCourses есть метод
// user.rate еще метод
// user.role - админ(этот видит всё), студент(этот маленький кусок), модератор(этот частично)
// user (login(), logout() - username, email, password минимализм для всех )

let user = {
    username: '',
    password: '',
    email: '',
    role: ''
    // методы
    // сбросить пароль
    //getCourses(
        if(admin) ...
        if(student) ...
        if(guest) ...
    //) этот метод доступен всем, но работать должен по разному (полиморфизм)
};

// наследование - расширение свойств на основе чего то базового
// расширим сущность user admin это расширение user
let admin = (user){
    // changeUserStatus() 
    // changeUserCourses() 
    перезапишем метод getCourses(){получить все курсы} -> полиморфизм
};
let student = (user){
    //rate
    перезапишем метод getCourses(){получить курсы конкретного студента} -> полиморфизм
};
// полиморфизм - множество свойств одного и того же метода(прямой перевод)
// п - это возможность применения в данном контексте с-в и методов, но 
// это с.и м. меняются у каждой сущности

// инкапсуляция это скрытие каких то реализаций
// скрытие в плане того, что нам не важно как оно реализовано

course {
    title: '',
    url: '',
    price: '' 20.00,  // privat, protected ... 
    getPrice: {return price} // и всем вернет 20, потом дописал скидку и цен будет меняться
}



course.price // это конечно же не хорошо
course.getPrice() // лучшеЕ используем метод, не важно как реализован, работает и ладно

